# ---------------------------------------------------------------------------------------------------------------------- #
# Install dependencies

- name: mysql_install
  ansible.builtin.apt:
    name: 
      - mysql-server
      - python3-pymysql
# ---------------------------------------------------------------------------------------------------------------------- #
# Service MySQL

- name: mysql_service
  ansible.builtin.service:
    name: mysql
    state: started
    enabled: true

# ---------------------------------------------------------------------------------------------------------------------- #
# Configure MySQL

- name: mysql_template_override
  ansible.builtin.template:
    src: override.cnf
    dest: /etc/mysql/mysql.conf.d/override.cnf 
  notify:
    - mysql_restart

- name: mysql_variables
  community.mysql.mysql_variables:
    variable: read_only
    value: "{{ 'OFF' if inventory_hostname == mysql_host else 'ON' }}"
    mode: persist
    login_unix_socket: /var/run/mysqld/mysqld.sock
  notify:
    - mysql_reset_source
    - mysql_reset_replica

# ---------------------------------------------------------------------------------------------------------------------- #
# Create Agama database

- name: mysql_database_agama
  community.mysql.mysql_db:
    name: "{{ mysql_database }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  notify:
    - mysql_reset_source
    - mysql_reset_replica

# ---------------------------------------------------------------------------------------------------------------------- #
# Create necessary users

- name: mysql_user_agama
  community.mysql.mysql_user:
    name: "{{ mysql_user }}"
    password: "{{ mysql_password }}"
    host: "%"
    priv: "{{ mysql_database }}.*:ALL"
    login_unix_socket: /var/run/mysqld/mysqld.sock

- name: mysql_user_backup
  community.mysql.mysql_user:
    name: "{{ backup_user }}"
    password: "{{ backup_user_mysql_password }}"
    priv: "{{ mysql_database }}.*:LOCK TABLES,SELECT"
    login_unix_socket: /var/run/mysqld/mysqld.sock

- name: mysql_user_exporter
  community.mysql.mysql_user:
    name: "{{ mysql_exporter_user }}"
    password: "{{ mysql_exporter_password }}"
    host: "%"
    resource_limits: 
      MAX_USER_CONNECTIONS: 3
    priv: '*.*:PROCESS,REPLICATION CLIENT'
    login_unix_socket: /var/run/mysqld/mysqld.sock    

- name: mysql_user_replication
  community.mysql.mysql_user:
    name: "{{ mysql_replication_user }}"
    password: "{{ mysql_replication_password }}"
    host: "%"
    resource_limits: 
      MAX_USER_CONNECTIONS: 3
    priv: '*.*:REPLICATION SLAVE'
    login_unix_socket: /var/run/mysqld/mysqld.sock    

# ---------------------------------------------------------------------------------------------------------------------- #
# Template my.cnf files for users

- name: mysql_template_my_prometheus
  ansible.builtin.template:
    src: prometheus.my.cnf.j2
    dest: /var/lib/prometheus/.my.cnf
    owner: prometheus
    group: prometheus
    mode: '0640' 
  no_log: true
  notify:
    - mysql_restart_exporter

- name: mysql_template_my_backup
  ansible.builtin.template:
    src: backup.my.cnf.j2
    dest: "{{ backup_user_home }}/.my.cnf"
    owner: "{{ backup_user }}"
    group: "{{ backup_user }}"
    mode: '0600' 
  no_log: true

# ---------------------------------------------------------------------------------------------------------------------- #
# Backup

- name: mysql_directory_backup
  file:
    state: directory
    path: "{{ backup_user_home }}/{{ item }}"
    owner: "{{ backup_user }}"
    group: "{{ backup_user }}"
    mode: '0700'
  no_log: true
  loop:
    - mysql
    - restore

- name: mysql_template_cron
  template:
    src: mysql-backup.j2
    dest: /etc/cron.d/mysql-backup

# ---------------------------------------------------------------------------------------------------------------------- #
# Prometheus exporter
# Note! This task MUST BE AFTER mysql_template_my_prometheus task

- name: mysql_install_exporter
  ansible.builtin.apt:
    name: prometheus-mysqld-exporter 

- name: mysql_copy_exporter_conf
  copy:
    src: prometheus-mysqld-exporter
    dest: /etc/default/prometheus-mysqld-exporter
  notify:
    - mysql_restart_exporter
# ---------------------------------------------------------------------------------------------------------------------- #
# Service exporter

- name: mysql_service_exporter
  ansible.builtin.service:
    name: prometheus-mysqld-exporter
    state: started
    enabled: true

# ---------------------------------------------------------------------------------------------------------------------- #
# Update DNS records

- name: mysql_nsupdate
  community.general.nsupdate:
    key_name: "nsupdate.key"
    key_secret: "{{ bind_secret_update }}"
    key_algorithm: "hmac-sha256"
    server: "{{ hostvars[bind_host]['ansible_default_ipv4']['address'] }}"
    record: "mysql-{{ inventory_hostname[-1] }}"
    zone: "{{ domain }}"    
    type: "CNAME"
    value: "{{ inventory_hostname  }}"
    ttl: 604800
  no_log: true